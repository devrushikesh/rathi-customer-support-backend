// IMPROVED PRISMA SCHEMA WITH OPTIMIZATIONS

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model Customer {
  id        Int          @id @default(autoincrement())
  name      String       @db.VarChar(100)
  email     String       @unique @db.VarChar(255)
  mobile_no String       @unique @db.VarChar(20)
  role      CustomerRole @default(CUSTOMER)

  issues   Issue[]
  Projects Projects[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mobile_no])
  @@map("customers")
}

model Employee {
  id         String       @id @default(cuid())
  name       String       @db.VarChar(100)
  email      String       @unique @db.VarChar(255)
  mobile_no  String       @unique @db.VarChar(20)
  department Department?
  role       EmployeeRole
  isActive   Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedIssues    IssueAssignedDepartment[]
  siteVisitRequests SiteVisitRequest[]

  @@index([mobile_no])
  @@index([department, isActive]) // Compound index for filtering active employees by department
  @@map("employees")
  siteVisitsAsVisitor IssueSiteVisit[] @relation("SiteVisitorRelation")
  siteVisitsAsWorkingHead IssueSiteVisit[] @relation("WorkingHeadRelation")
}

model Projects {
  id               Int      @id @default(autoincrement())
  projectName      String
  application      String
  machineType      String
  capacity         String
  location         String
  feedSize         String
  finalProductSize String
  customerId       Int
  customer         Customer @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())

  Issue Issue[]

  @@index([id])
  @@map("projects")
}

model Issue {
  id String @id @default(cuid())

  // User-friendly ticket number
  ticketNo String @unique @db.VarChar(20)

  description String @db.Text

  projectId Int
  project   Projects @relation(fields: [projectId], references: [id])

  // Attachments
  attachmentUrls String[] @default([]) // Fixed naming convention

  // Issue details
  priority Priority @default(MEDIUM)

  // Status tracking
  customerStatus CustomerStatus @default(OPEN)
  internalStatus InternalStatus @default(NEW)

  // Important dates
  dueDate    DateTime?
  resolvedAt DateTime?
  closedAt   DateTime?
  reopenedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Restrict)

  timeline            IssueTimeLine[]
  siteVisits          IssueSiteVisit[]
  assignedDepartments IssueAssignedDepartment[]
  siteVisitRequests   SiteVisitRequest[]

  // Optimized indexes
  @@index([customerStatus]) // Compound index for customer dashboard
  @@index([internalStatus]) // Compound index for internal tracking
  @@index([customerId, createdAt]) // Customer's issues chronologically
  @@index([ticketNo])
  @@index([dueDate]) // For deadline tracking
  @@map("issues")
}

// Fixed table name consistency
model IssueAssignedDepartment {
  id String @id @default(cuid())

  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Restrict)

  isStartedWork Boolean @default(false)

  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true) // Allow reassignment tracking

  @@unique([issueId, employeeId, isActive]) // Prevent duplicate active assignments
  @@index([employeeId, isActive])
  @@map("issue_assigned_departments")
}

model IssueSiteVisit {
  id String @id @default(cuid())

  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  status        VisitStatus @default(SCHEDULED)
  scheduledDate DateTime // Fixed naming convention
  actualDate    DateTime? // When visit actually happened
  notes         String?     @db.Text // Visit notes/findings

  workingDepartment Department
  workingHeadId     String
  workingHEAD  Employee @relation("WorkingHeadRelation", fields: [workingHeadId], references: [id])

  siteVisitorId String
  siteVisitor   Employee @relation("SiteVisitorRelation", fields: [siteVisitorId], references: [id], onDelete: Restrict)

  // One-to-one relationship with site visit request
  siteVisitRequest  SiteVisitRequest? 


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([siteVisitorId, scheduledDate])
  @@index([status, scheduledDate])
  @@map("issue_site_visits")
}

// Fixed table name consistency
model SiteVisitRequest {
  id String @id @default(cuid())

  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  status                SiteVisitRequestStatus
  requestFromName       String
  requestFromDepartment Department

  requestFromHeadId String
  requestFromHead   Employee @relation(fields: [requestFromHeadId], references: [id], onDelete: Restrict)

  // Optional relationship to actual site visit
  siteVisitId String?         @unique
  siteVisit   IssueSiteVisit? @relation(fields: [siteVisitId], references: [id])

  requestedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@index([requestFromDepartment, status])
  @@map("site_visit_requests")
}

// Fixed table name consistency  
model IssueTimeLine {
  id      String @id @default(cuid())
  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  action  ActionType @default(ISSUE_CREATED)
  comment String?    @db.Text

  // Status transitions
  fromCustomerStatus CustomerStatus?
  toCustomerStatus   CustomerStatus?
  fromInternalStatus InternalStatus?
  toInternalStatus   InternalStatus?

  // Assignment tracking  
  fromEmployeeId String?
  toEmployeeId   String?

  // Metadata
  visibleToCustomer Boolean @default(false)
  performedBy       String? // Who performed this action

  createdAt DateTime @default(now())

  @@index([issueId, createdAt]) // Chronological timeline
  @@index([visibleToCustomer])
  @@map("issue_timeline")
}

// ENUMS - Improved and expanded
enum CustomerRole {
  CUSTOMER
}

enum EmployeeRole {
  ISSUE_MANAGER
  HEAD
  SERVICE_ENGINEER
}

enum CustomerStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum InternalStatus {
  NEW
  ASSIGNED
  WORK_STARTED
  // REASSIGNED
  // TRANSFERRED
  // ESCALATED
  RESOLVED
  REOPENED
  CLOSED
  CANCELLED

  ATTACHMENT_REQUESTED
  SITE_VISIT_REQUESTED
  SITE_VISIT_SCHEDULED
  SITE_VISIT_COMPLETED
}

enum ActionType {
  // Lifecycle events
  ISSUE_CREATED
  ASSIGNED
  REASSIGNED
  TRANSFERRED
  ESCALATED
  RESOLVED
  REOPENED
  CLOSED
  CANCELLED

  // Activity events
  COMMENT_ADDED
  WORK_STARTED
  ATTACHMENT_ADDED
  ATTACHMENT_REQUESTED
  SITE_VISIT_REQUESTED
  SITE_VISIT_REQUEST_REJECTED
  SITE_VISIT_SCHEDULED
  SITE_VISIT_COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Category {
  HARDWARE_ISSUE
  QUALITY_ISSUE
  MAINTENANCE
  INSTALLATION
  TRAINING
  WARRANTY_CLAIM
  SERVICING
  ELECTRICAL_ISSUE
  OTHER
}

enum VisitStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum Department {
  SALES
  SERVICE
  ENGINEERING
  MANUFACTURING
  FABRICATION
  DESIGN
  QUALITY
}

enum SiteVisitRequestStatus {
  PENDING
  COMPLETED
  REJECTED
}
